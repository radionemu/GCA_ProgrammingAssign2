#version 430 core

uniform sampler2D TextureSampler;
uniform int rendermode;
uniform float threshold;

in vec2 UV;

out vec3 color;

mat3 sx = mat3(
	1.0, 2.0, 1.0,
	0.0, 0.0, 0.0,
	-1.0, -2.0, -1.0
);
mat3 sy = mat3(
	1.0, 0.0, -1.0,
	2.0, 0.0, -2.0,
	1.0, 0.0, -1.0
);

float threshclamp(float i, float threshold){
	return (clamp(i-threshold,0,1));
}

void main()
{
	vec2 newcoord = vec2(UV.x, 1-UV.y);
	vec3 aa = (texture(TextureSampler,vec2(UV.x,1-UV.y)).rgb);
	//sobel Edge Detect
	mat3 Iden;
	for(int i=0; i<3; i++){
		for(int j=0; j<3; j++){
			vec3 ssample = texelFetch(TextureSampler, ivec2(gl_FragCoord.x, -gl_FragCoord.y+512)+ivec2(i-1,j-1),0).rgb;
			Iden[i][j] = length(ssample);
		}
	}
	float gx = dot(sx[0], Iden[0]) + dot(sx[1], Iden[1])+ dot(sx[2], Iden[2]);
	float gy = dot(sy[0], Iden[0]) + dot(sy[1], Iden[1])+ dot(sy[2], Iden[2]);
	float g = sqrt(pow(gx,2.0)+pow(gy,2.0));
	
	if(rendermode == 0){
		//normal
		color = texture(TextureSampler,vec2(UV.x,1-UV.y)).rgb;
	}else if(rendermode == 1){
		//negative
		color = vec3(1) - texture(TextureSampler,vec2(UV.x,1-UV.y)).rgb;
	}else if(rendermode == 2){
		//sobel edge
		color = vec3(threshclamp(g,threshold));
	}else if(rendermode == 3){
		//toon render
		color = vec3(ivec3((aa)*4)+1.0)/4-vec3(threshclamp(g,threshold));
	}

}
